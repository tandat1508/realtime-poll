{"version":3,"sources":["img/logo-white.svg","apollo.js","Components.jsx","GraphQL.jsx","Result.jsx","Poll.jsx","session.js","Users.jsx","App.jsx","index.js"],"names":["module","exports","authLink","setContext","_","headers","httpLink","createHttpLink","uri","client","ApolloClient","link","concat","cache","InMemoryCache","Loading","Error","message","className","role","Header","src","logo","alt","Footer","href","target","rel","QUERY_GET_POLL","gql","MUTATION_VOTE","SUBSCRIPTION_RESULT","SUBSCRIPTION_online_user","MUTATION_MARK_USER_ONLINE","MUTATION_NEW_USER","GraphQLQueryList","Card","Body","loc","source","body","Result","pollId","useSubscription","variables","data","loading","error","hasResults","poll_results","length","PollChart","d","forEach","option","votes","push","text","parseInt","chartType","loader","options","chartOptions","height","chart","title","legend","position","animation","duration","easing","startup","PollQuestion","poll","userId","defaultState","optionId","id","voteBtnText","voteBtnStyle","useState","state","setState","useMutation","vote","useEffect","timer","setTimeout","clearTimeout","handleOptionChange","e","currentTarget","value","prev","question","Form","onSubmit","preventDefault","handlesubmitVote","map","Check","custom","type","name","key","label","onChange","Button","variant","Poll","useQuery","newUUID","p8","s","p","Math","random","toString","substr","getUserId","a","mutate","mutation","uuid","insert_user","returning","reportUserOnline","console","window","setInterval","Users","count","online_user","Alert","aria-label","App","fetchUserId","ApolloProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5311ba2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-white.c3351f89.svg\";","import {\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\n\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      \"x-hasura-admin-secret\": \"0j3O8G4L107Q7jB3vIpjdfaFfMAsn1Pq4vPqjCor0WQVDUuEn1CN7Jz3LF3NvJiT\",\n    },\n  };\n});\n\nconst httpLink = createHttpLink({\n  uri: `https://poll-app-react.hasura.app/v1/graphql`,\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import React from \"react\";\nimport logo from \"./img/logo-white.svg\";\n\n// State indicator components\nexport const Loading = () => <div>Loading...</div>;\nexport const Error = ({ message }) => (\n  <div className=\"alert alert-danger\" role=\"alert\">\n    <b>Error:</b> {message}\n  </div>\n);\n\n// Layout components\nexport const Header = () => (\n  <header className=\"App-header displayFlex\">\n    <div className=\"container displayFlex\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <h1 className=\"App-title\">Realtime Poll</h1>\n    </div>\n  </header>\n);\n\nexport const Footer = () => (\n  <footer className=\"App-footer displayFlex\">\n    <div className=\"container hasura-logo\">\n      <a href=\"https://hasura.io\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img\n          className=\"hasura-logo\"\n          alt=\"hasura logo\"\n          src=\"https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_black_200px.png\"\n        />\n      </a>\n      &nbsp; | &nbsp;\n      <a href=\"https://realtime-poll.hasura.app/console\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Backend\n      </a>\n      &nbsp; | &nbsp;\n      <a\n        href=\"https://github.com/hasura/graphql-engine/tree/master/community/sample-apps/realtime-poll\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Source\n      </a>\n      <div className=\"footer-small-text\">\n        <span>(The database resets every 24 hours)</span>\n      </div>\n    </div>\n  </footer>\n);\n","import gql from \"graphql-tag\";\nimport React from \"react\";\nimport { Card } from \"react-bootstrap\";\n\nconst QUERY_GET_POLL = gql`\n  query {\n    poll(limit: 10) {\n      id\n      question\n      options(order_by: { id: desc }) {\n        id\n        text\n      }\n    }\n  }\n`;\n\nconst MUTATION_VOTE = gql`\n  mutation vote($optionId: uuid!, $userId: uuid!) {\n    insert_vote(\n      objects: [{ option_id: $optionId, created_by_user_id: $userId }]\n    ) {\n      returning {\n        id\n      }\n    }\n  }\n`;\n\nconst SUBSCRIPTION_RESULT = gql`\n  subscription getResult($pollId: uuid!) {\n    poll_results(\n      order_by: { option_id: desc }\n      where: { poll_id: { _eq: $pollId } }\n    ) {\n      option_id\n      option {\n        id\n        text\n      }\n      votes\n    }\n  }\n`;\n\nconst SUBSCRIPTION_online_user = gql`\n  subscription getOnlineUsersCount {\n    online_user {\n      count\n    }\n  }\n`;\n\nconst MUTATION_MARK_USER_ONLINE = gql`\n  mutation userOnline($uuid: uuid) {\n    update_user(where: { id: { _eq: $uuid } }, _set: { online_ping: true }) {\n      affected_rows\n      returning {\n        last_seen_at\n      }\n    }\n  }\n`;\n\nconst MUTATION_NEW_USER = gql`\n  mutation newUser($uuid: uuid) {\n    insert_user(objects: [{ id: $uuid }]) {\n      returning {\n        id\n        created_at\n      }\n    }\n  }\n`;\n\nconst GraphQLQueryList = () => (\n  <div className=\"container\">\n    <div className=\"col-md-12 cardGraphQL\">\n      <Card>\n        <Card.Header>\n          GraphQL Queries/Mutations/Subscriptions in this page\n        </Card.Header>\n        <Card.Body>\n          <div className=\"row\">\n            <div className=\"col-md-4\">\n              Get the Poll question and options:\n              <pre>{QUERY_GET_POLL.loc.source.body}</pre>\n              Create a new user:\n              <pre>{MUTATION_NEW_USER.loc.source.body}</pre>\n            </div>\n            <div className=\"col-md-4\">\n              Cast a vote:\n              <pre>{MUTATION_VOTE.loc.source.body}</pre>\n              Mark user online:\n              <pre>{MUTATION_MARK_USER_ONLINE.loc.source.body}</pre>\n            </div>\n            <div className=\"col-md-4\">\n              Show live results:\n              <pre>{SUBSCRIPTION_RESULT.loc.source.body}</pre>\n              Get real-time number of users:\n              <pre>{SUBSCRIPTION_online_user.loc.source.body}</pre>\n            </div>\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  </div>\n);\n\nexport {\n  GraphQLQueryList,\n  QUERY_GET_POLL,\n  MUTATION_VOTE,\n  SUBSCRIPTION_RESULT,\n  SUBSCRIPTION_online_user,\n  MUTATION_MARK_USER_ONLINE,\n  MUTATION_NEW_USER,\n};\n","import { useSubscription } from \"@apollo/client\";\nimport React from \"react\";\nimport { Chart } from \"react-google-charts\";\nimport { Error, Loading } from \"./Components\";\nimport { SUBSCRIPTION_RESULT } from \"./GraphQL\";\n\nexport const Result = ({ pollId }) => {\n  const { data, loading, error } = useSubscription(SUBSCRIPTION_RESULT, {\n    variables: { pollId },\n  });\n\n  const hasResults = data?.poll_results.length > 0;\n\n  if (loading) return <Loading />;\n  if (error) return <Error message={error.message} />;\n\n  return (\n    <div>\n      {hasResults ? <PollChart data={data?.poll_results} /> : <p>No result</p>}\n    </div>\n  );\n};\n\nconst PollChart = ({ data }) => {\n  const COLOR = \"color: #4285f4\";\n  const d = [\n    [\"Option\", \"No. of votes\", { role: \"annotation\" }, { role: \"style\" }],\n  ];\n\n  data.forEach(({ option, votes }) =>\n    d.push([option.text, parseInt(votes), parseInt(votes), COLOR])\n  );\n\n  return (\n    <Chart\n      className=\"poll-result-chart-container\"\n      chartType=\"BarChart\"\n      loader={<div>Loading Chart</div>}\n      data={d}\n      options={chartOptions}\n    />\n  );\n};\n\nconst chartOptions = {\n  height: \"100%\",\n  chart: {\n    title: \"Realtime results\",\n  },\n  legend: { position: \"none\" },\n  animation: {\n    duration: 1000,\n    easing: \"out\",\n    startup: true,\n  },\n};\n","import { useMutation, useQuery } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Form } from \"react-bootstrap\";\nimport { Error, Loading } from \"./Components\";\nimport { MUTATION_VOTE, QUERY_GET_POLL } from \"./GraphQL\";\nimport { Result } from \"./Result\";\n\nconst PollQuestion = ({ poll, userId }) => {\n  const defaultState = {\n    optionId: \"\",\n    pollId: poll.id,\n    voteBtnText: \"🗳 Vote\",\n    voteBtnStyle: \"primary\",\n  };\n  const [state, setState] = useState(defaultState);\n  const [vote, { data, error }] = useMutation(MUTATION_VOTE);\n\n  const handlesubmitVote = (e) => {\n    e.preventDefault();\n    if (!state.optionId) {\n      setState({\n        voteBtnText: \"✋ Select an option and try again\",\n        voteBtnStyle: \"warning\",\n      });\n      return;\n    }\n\n    setState({\n      voteBtnText: \"🗳️ Submitting\",\n      voteBtnStyle: \"info\",\n    });\n\n    vote({\n      variables: {\n        optionId: state.optionId,\n        userId,\n      },\n    });\n  };\n\n  // To-do: use cleanup\n  useEffect(() => {\n    if (data) {\n      setState({\n        voteBtnText: \"👍 Done\",\n        voteBtnStyle: \"success\",\n      });\n\n      //  Re-authorize to vote after 5 seconds\n      let timer = setTimeout(() => {\n        setState({\n          voteBtnText: \"🗳️ Vote\",\n          voteBtnStyle: \"primary\",\n        });\n      }, 5000);\n\n      return () => clearTimeout(timer);\n    }\n\n    if (error) {\n      setState({\n        voteBtnText: \"Error 😞 Try again\",\n        voteBtnStyle: \"danger\",\n      });\n    }\n  }, [data, error]);\n\n  const handleOptionChange = (e) => {\n    const optionId = e.currentTarget.value;\n    setState((prev) => ({ ...prev, optionId }));\n  };\n\n  return (\n    <div className=\"textLeft\">\n      <h3>{poll.question}</h3>\n      <Form\n        className=\"pollForm textLeft\"\n        onSubmit={(e) => {\n          handlesubmitVote(e);\n        }}\n      >\n        {poll.options.map(({ id, text }) => (\n          <Form.Check\n            custom\n            type=\"radio\"\n            name=\"voteCandidate\"\n            id={id}\n            key={id}\n            value={id}\n            label={text}\n            onChange={handleOptionChange}\n          />\n        ))}\n        <Button\n          className=\"voteBtn info\"\n          variant={state.voteBtnStyle}\n          type=\"submit\"\n        >\n          {state.voteBtnText}\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport const Poll = ({ userId }) => {\n  const { data, loading, error } = useQuery(QUERY_GET_POLL);\n\n  if (loading) return <Loading />;\n  if (error) return <Error message={error.message} />;\n\n  return (\n    <div className=\"container\">\n      {data?.poll.map((poll) => (\n        <div key={poll.id} className=\"pollWrapper wd100\">\n          <div className=\"displayFlex\">\n            <div className=\"col-md-4 pollSlider\">\n              <PollQuestion poll={poll} userId={userId} />\n            </div>\n            <div className=\"col-md-8 pollresult\">\n              <Result pollId={poll.id} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n","import client from \"./apollo\";\nimport { MUTATION_MARK_USER_ONLINE, MUTATION_NEW_USER } from \"./GraphQL\";\n\nconst newUUID = () => {\n  const p8 = (s) => {\n    let p = (Math.random().toString(16) + \"000000000\").substr(2, 8);\n    return s ? \"-\" + p.substr(0, 4) + \"-\" + p.substr(4, 4) : p;\n  };\n  return p8() + p8(true) + p8(true) + p8();\n};\n\nconst getUserId = async () => {\n  const { data } = await client.mutate({\n    mutation: MUTATION_NEW_USER,\n    variables: { uuid: newUUID() },\n  });\n\n  try {\n    if (data?.insert_user.returning.length > 0) {\n      const { id } = data.insert_user.returning[0] || {};\n\n      reportUserOnline(id);\n      return id;\n    } else {\n      throw new Error(400);\n    }\n  } catch (error) {\n    console.error(error);\n    throw new Error(400);\n  }\n};\n\nconst reportUserOnline = (userId) => {\n  window.setInterval(async () => {\n    try {\n      await client.mutate({\n        mutation: MUTATION_MARK_USER_ONLINE,\n        variables: {\n          uuid: userId,\n        },\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }, 10000);\n};\n\nexport { getUserId };\n","import { useSubscription } from \"@apollo/client\";\nimport React from \"react\";\nimport { Alert } from \"react-bootstrap\";\nimport { Error, Loading } from \"./Components\";\nimport { SUBSCRIPTION_online_user } from \"./GraphQL\";\n\nexport const Users = () => {\n  const { data, loading, error } = useSubscription(SUBSCRIPTION_online_user);\n  const { count } = data?.online_user[0] || {};\n\n  if (loading) return <Loading />;\n  if (error) return <Error message={error.message} />;\n\n  return (\n    <div className=\"displayFlex online-users\">\n      <div className=\"col-md-6\">\n        <Alert variant=\"info\">\n          <span role=\"img\" aria-label=\"online users\">\n            👥\n          </span>{\" \"}\n          Online users: {count}\n        </Alert>\n      </div>\n    </div>\n  );\n};\n","import { ApolloProvider } from \"@apollo/client\";\nimport React, { useEffect, useState } from \"react\";\nimport client from \"./apollo\";\nimport \"./App.css\";\nimport { Footer, Header } from \"./Components\";\nimport { GraphQLQueryList } from \"./GraphQL\";\nimport { Poll } from \"./Poll\";\nimport { getUserId } from \"./session\";\nimport { Users } from \"./Users\";\n\nconst App = () => {\n  const defaultState = { loading: true, userId: \"\" };\n  const [state, setState] = useState(defaultState);\n\n  useEffect(() => {\n    const fetchUserId = async () => {\n      const userId = await getUserId();\n      setState({ loading: false, userId });\n    };\n\n    fetchUserId();\n  }, []);\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <Header />\n        <Users />\n        <Poll userId={state.userId} />\n        <GraphQLQueryList />\n        <Footer />\n      </div>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}